/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6-dev at Fri May 19 19:11:33 2017. */

#ifndef PB_FILE_TRANSFER_PB_H_INCLUDED
#define PB_FILE_TRANSFER_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(32) BlockRequest_bitmap_t;
typedef struct _BlockRequest {
    uint32_t piece;
    BlockRequest_bitmap_t bitmap;
    uint32_t transferred_pieces;
/* @@protoc_insertion_point(struct:BlockRequest) */
} BlockRequest;

typedef PB_BYTES_ARRAY_T(32) BlockResponse_data_t;
typedef struct _BlockResponse {
    uint32_t piece;
    uint32_t block;
    BlockResponse_data_t data;
/* @@protoc_insertion_point(struct:BlockResponse) */
} BlockResponse;

typedef PB_BYTES_ARRAY_T(4) FileMetadata_crc32_t;
typedef PB_BYTES_ARRAY_T(32) FileMetadata_sha2_256_t;
typedef PB_BYTES_ARRAY_T(32) FileMetadata_file_name_t;
typedef struct _FileMetadata {
    uint32_t piece_size_blocks;
    uint32_t file_size_bytes;
    bool has_file_name;
    FileMetadata_file_name_t file_name;
    pb_size_t which_check;
    union {
        FileMetadata_crc32_t crc32;
        FileMetadata_sha2_256_t sha2_256;
    } check;
    uint32_t block_size_bytes;
/* @@protoc_insertion_point(struct:FileMetadata) */
} FileMetadata;

typedef PB_BYTES_ARRAY_T(32) FileRequest_file_name_t;
typedef struct _FileRequest {
    FileRequest_file_name_t file_name;
/* @@protoc_insertion_point(struct:FileRequest) */
} FileRequest;

typedef PB_BYTES_ARRAY_T(4) FileTransferMessage_session_id_t;
typedef struct _FileTransferMessage {
    FileTransferMessage_session_id_t session_id;
    pb_size_t which_content;
    union {
        FileMetadata file_metadata;
        FileRequest file_request;
        BlockRequest block_request;
        BlockResponse block_response;
    } content;
/* @@protoc_insertion_point(struct:FileTransferMessage) */
} FileTransferMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define FileTransferMessage_init_default         {{0, {0}}, 0, {FileMetadata_init_default}}
#define FileMetadata_init_default                {0, 0, false, {0, {0}}, 0, {{0, {0}}}, 0}
#define FileRequest_init_default                 {{0, {0}}}
#define BlockRequest_init_default                {0, {0, {0}}, 0}
#define BlockResponse_init_default               {0, 0, {0, {0}}}
#define FileTransferMessage_init_zero            {{0, {0}}, 0, {FileMetadata_init_zero}}
#define FileMetadata_init_zero                   {0, 0, false, {0, {0}}, 0, {{0, {0}}}, 0}
#define FileRequest_init_zero                    {{0, {0}}}
#define BlockRequest_init_zero                   {0, {0, {0}}, 0}
#define BlockResponse_init_zero                  {0, 0, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define BlockRequest_piece_tag                   1
#define BlockRequest_bitmap_tag                  2
#define BlockRequest_transferred_pieces_tag      3
#define BlockResponse_piece_tag                  1
#define BlockResponse_block_tag                  2
#define BlockResponse_data_tag                   3
#define FileMetadata_crc32_tag                   4
#define FileMetadata_sha2_256_tag                5
#define FileMetadata_file_size_bytes_tag         2
#define FileMetadata_file_name_tag               3
#define FileMetadata_piece_size_blocks_tag       1
#define FileMetadata_block_size_bytes_tag        6
#define FileRequest_file_name_tag                1
#define FileTransferMessage_file_metadata_tag    2
#define FileTransferMessage_file_request_tag     3
#define FileTransferMessage_block_request_tag    4
#define FileTransferMessage_block_response_tag   5
#define FileTransferMessage_session_id_tag       1

/* Struct field encoding specification for nanopb */
extern const pb_field_t FileTransferMessage_fields[6];
extern const pb_field_t FileMetadata_fields[7];
extern const pb_field_t FileRequest_fields[2];
extern const pb_field_t BlockRequest_fields[4];
extern const pb_field_t BlockResponse_fields[4];

/* Maximum encoded size of messages (where known) */
#define FileTransferMessage_size                 94
#define FileMetadata_size                        86
#define FileRequest_size                         34
#define BlockRequest_size                        46
#define BlockResponse_size                       46

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FILE_TRANSFER_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
